# 2D FFT layer
# assume: ignore cost of transpose
# assume: twiddle is pre-computed and stored on a ROM.
# input: [N][C][H][W] complex integer 16-bit type
# twiddle: [W/2] or [H/2]
# output: [N][C][H][W] complex integer 16-bit type
# 
# //Batch
# for (n=0;n<N;n++)
#     //Channel
#     for (c=0;c<C;c++)
#         // Horizontal + Transpose->Horizontal
#         for (t=0;t<2;t++)
#             //Horizontal indexing
#             for(h=0;h<H;h++)
#                 //1D-FFT, assume W=H, S = log_2(W)
#                 for(s=1;s<=S;s++)
#                     //Buttefly, J=W/2
#                     for(j=0;j<J;j++)
#                         // Our FFT primitive
#                         m = (j >> (W-s)) << (W-s)   // 2 shift ops
#                         w = twd[m]                  // 1 ROM read 
#                         in0 = a[n][c][h][2*j]                // 1 AG and 1 SRAM read
#                         in1 = a[n][c][h][2*j+1]              // 1 AG and 1 SRAM read
#                         tmp = in1*2                 // 1 complex mult op
#                         a[n][c][h][j] = in0 + tmp            // 1 complex add
#                         a[n][c][h][j + W/2] = in0 - tmp      // 1 complex subtract

problem:
  instance:
    N: 1
    C: 3
    T: 2
    H: 256
    S: 5
    J: 128
    X: 2
    Y: 2
    K: 2

    L: 2
    O: 16
  shape:
    coefficients:
    - default: 1
      name: L
    - default: 1
      name: O
    data-spaces:
    - name: Twiddles
      projection:
      - - - J
    - name: Inputs
      projection:
      - - - N
      - - - C
      - - - H
      - - - J
          - L
        - - Y
      - - - K
    - name: Outputs
      projection:
      - - - N
      - - - C
      - - - H
      - - - J
        - - X
          - O
      - - - K
      read-write: true
    dimensions:
    - N
    - C
    - T
    - H
    - S
    - J
    - X
    - Y
    - K
    name: CNN-Layer
